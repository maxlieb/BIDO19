#!/bin/bash

# =========================
# toolz: A Multi-Tool Utility
# Author: [Your Name]
# Description: Combines find helper, system info, process management, user management
# =========================

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Ensure the script is run with bash
if [ -z "$BASH_VERSION" ]; then
    echo -e "${RED}Error:${NC} Please run this script with bash."
    exit 1
fi

# Check for root privileges when needed
function require_root() {
    if [ "$EUID" -ne 0 ]; then
        echo -e "${RED}This action requires root privileges. Please run as root.${NC}"
        return 1
    fi
    return 0
}

# Validate if input is a number
function is_number() {
    [[ $1 =~ ^[0-9]+$ ]]
}

# Functions

function show_help() {
    echo -e "\n${BLUE}Usage:${NC} toolz [option]"
    echo -e "\nOptions:"
    echo -e "  -f    Find Helper"
    echo -e "  -s    System Information"
    echo -e "  -p    Process Management"
    echo -e "  -u    User Management"
    echo -e "  -h    Help (this menu)"
    echo -e "\nExamples:"
    echo -e "  ./toolz.sh -f"
    echo -e "  ./toolz.sh -s"
    echo -e "  ./toolz.sh -p"
    echo -e "  ./toolz.sh -u"
}

function find_helper() {
    echo -e "${YELLOW}Welcome to the Find Helper!${NC}"
    read -p "Enter directory to search (default is current): " dir
    dir=${dir:-.}
    if [ ! -d "$dir" ]; then
        echo -e "${RED}Directory does not exist.${NC}"
        return
    fi
    read -p "Enter filename pattern (e.g., *.txt): " pattern
    read -p "Search by size? (e.g., +10M or -5M) Leave blank to skip: " size

    cmd="find \"$dir\""
    if [ -n "$pattern" ]; then
        cmd+=" -name \"$pattern\""
    fi
    if [ -n "$size" ]; then
        cmd+=" -size $size"
    fi

    echo -e "\nRunning: ${GREEN}$cmd${NC}\n"
    eval $cmd
}

function system_info() {
    echo -e "${YELLOW}System Information:${NC}"
    echo -e "\n${BLUE}Available Memory:${NC}"
    free -h

    echo -e "\n${BLUE}Number of Running Processes:${NC}"
    ps aux --no-heading | wc -l

    echo -e "\n${BLUE}Disk Usage:${NC}"
    df -h
}

function process_management() {
    echo -e "${YELLOW}Process Management:${NC}"
    echo -e "Select sorting method:"
    echo "1) CPU usage"
    echo "2) Memory usage"
    echo "3) Runtime (longest running)"
    read -p "Choose [1-3]: " sort_option

    case $sort_option in
        1)
            ps aux --sort=-%cpu | head -n 15
            ;;
        2)
            ps aux --sort=-%mem | head -n 15
            ;;
        3)
            ps -eo pid,etime,cmd --sort=etime | head -n 15
            ;;
        *)
            echo -e "${RED}Invalid choice.${NC}"
            return
            ;;
    esac

    read -p "Do you want to kill a process? (y/n): " kill_choice
    if [[ "$kill_choice" =~ ^[Yy]$ ]]; then
        read -p "Enter PID to kill: " pid
        if ! is_number "$pid"; then
            echo -e "${RED}Invalid PID.${NC}"
            return
        fi
        if kill -0 "$pid" 2>/dev/null; then
            read -p "Are you sure you want to kill PID $pid? (y/n): " confirm
            if [[ "$confirm" =~ ^[Yy]$ ]]; then
                kill "$pid" && echo -e "${GREEN}Process $pid killed.${NC}" || echo -e "${RED}Failed to kill process.${NC}"
            fi
        else
            echo -e "${RED}PID $pid does not exist.${NC}"
        fi
    fi
}

function user_management() {
    echo -e "${YELLOW}User Management:${NC}"
    echo "1) Show currently logged-in users"
    echo "2) Show user account information"
    echo "3) Show user resource usage"
    echo "4) Create user"
    echo "5) Delete user"
    echo "6) Rename user"
    echo "7) Add user to group"
    echo "8) Change user password"
    read -p "Choose [1-8]: " user_option

    case $user_option in
        1)
            w
            ;;
        2)
            read -p "Enter username: " username
            if id "$username" &>/dev/null; then
                id "$username"
            else
                echo -e "${RED}User $username does not exist.${NC}"
            fi
            ;;
        3)
            ps -u $(whoami) -o pid,etime,pcpu,pmem,cmd
            ;;
        4)
            require_root || return
            read -p "Enter new username: " newuser
            if id "$newuser" &>/dev/null; then
                echo -e "${RED}User already exists.${NC}"
                return
            fi
            useradd -m "$newuser" && echo -e "${GREEN}User $newuser created.${NC}" || echo -e "${RED}Failed to create user.${NC}"
            ;;
        5)
            require_root || return
            read -p "Enter username to delete: " deluser
            if ! id "$deluser" &>/dev/null; then
                echo -e "${RED}User does not exist.${NC}"
                return
            fi
            read -p "Are you sure you want to delete $deluser? (y/n): " confirm
            if [[ "$confirm" =~ ^[Yy]$ ]]; then
                userdel -r "$deluser" && echo -e "${GREEN}User $deluser deleted.${NC}" || echo -e "${RED}Failed to delete user.${NC}"
            fi
            ;;
        6)
            require_root || return
            read -p "Enter current username: " olduser
            if ! id "$olduser" &>/dev/null; then
                echo -e "${RED}User does not exist.${NC}"
                return
            fi
            read -p "Enter new username: " newname
            if id "$newname" &>/dev/null; then
                echo -e "${RED}New username already exists.${NC}"
                return
            fi
            usermod -l "$newname" "$olduser" && echo -e "${GREEN}User renamed from $olduser to $newname.${NC}" || echo -e "${RED}Failed to rename user.${NC}"
            ;;
        7)
            require_root || return
            read -p "Enter username: " user
            if ! id "$user" &>/dev/null; then
                echo -e "${RED}User does not exist.${NC}"
                return
            fi
            read -p "Enter group to add to: " group
            getent group "$group" >/dev/null || { echo -e "${RED}Group does not exist.${NC}"; return; }
            usermod -aG "$group" "$user" && echo -e "${GREEN}User $user added to group $group.${NC}" || echo -e "${RED}Failed to add user to group.${NC}"
            ;;
        8)
            require_root || return
            read -p "Enter username: " user
            if ! id "$user" &>/dev/null; then
                echo -e "${RED}User does not exist.${NC}"
                return
            fi
            passwd "$user"
            ;;
        *)
            echo -e "${RED}Invalid choice.${NC}"
            ;;
    esac
}

# Main Loop

while true; do
    if [ $# -eq 0 ]; then
        echo -e "${YELLOW}No options provided. Showing menu...${NC}"
        echo "1) Find Helper"
        echo "2) System Information"
        echo "3) Process Management"
        echo "4) User Management"
        echo "5) Help"
        echo "6) Exit"
        read -p "Choose [1-6]: " menu_option
        case $menu_option in
            1) find_helper ;;
            2) system_info ;;
            3) process_management ;;
            4) user_management ;;
            5) show_help ;;
            6) echo -e "${GREEN}Goodbye!${NC}"; break ;;
            *) echo -e "${RED}Invalid choice.${NC}" ;;
        esac
    else
        while getopts ":fspuh" opt; do
            case $opt in
                f)
                    find_helper
                    ;;
                s)
                    system_info
                    ;;
                p)
                    process_management
                    ;;
                u)
                    user_management
                    ;;
                h)
                    show_help
                    ;;
                \?)
                    echo -e "${RED}Invalid option: -$OPTARG${NC}" >&2
                    show_help
                    break
                    ;;
            esac
        done
        break
    fi
    echo
    read -p "Press Enter to continue..."
done

exit 0
